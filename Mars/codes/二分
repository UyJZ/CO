.data
a: .space 4000
str_enter:.asciiz "\n"
.macro RI(%a)
    li $v0,5
    syscall
    move %a,$v0
.end_macro
.macro PI1
    sw $a0,($sp)
    addi $sp,$sp,-4
    li $v0,1
    li $a0,1
    syscall
    addi $sp,$sp,4
    lw $a0,($sp)
.end_macro
.macro PI0
    sw $a0,($sp)
    addi $sp,$sp,-4
    li $v0,1
    li $a0,0
    syscall
    addi $sp,$sp,4
    lw $a0,($sp)
.end_macro
.macro penter
    sw $a0,($sp)
    addi $sp,$sp,-4
    li $v0,4
    la $a0,str_enter
    syscall
    addi $sp,$sp,4
    lw $a0,($sp)
.end_macro
.macro push(%a)
    sw %a,($sp)
    addi $sp,$sp,-4
.end_macro
.macro pop(%a)
    addi $sp,$sp,4
    lw %a,($sp)
.end_macro
.text
    RI($s0)
    li $s2,2
    li $t0,0
    loop1:
        beq $t0,$s0,loop1_end
        RI($t1)
        sll $t2,$t0,2
        sw $t1,a($t2)
        addi $t0,$t0,1
        j loop1
    loop1_end:
    RI($s1)
    li $t0,0
    loop2:
        beq $t0,$s1,loop2_end
        RI($t1)
        push($t0)
        move $a0,$t1
        jal binary_search
        pop($t0)
        addi $t0,$t0,1
        j loop2
    loop2_end:
    li $v0,10
    syscall
    
binary_search:
    push($ra)
    li $t0,0#low
    move $t1,$s0
    li $t3,0 #count
    li $t4,0 #count1
    addi $t1,$t1,-1 #high
    while:
        bgt $t0,$t1,BREAK
        addi $t3,$t3,1
        add $t5,$t0,$t1
        div $t5,$s2 #mid = (low + high) /2
        mflo $t2
        sll $t5,$t2,2
        lw $t6,a($t5) #t5 = a[mid]
        bge $a0,$t6,if2
            addi $t1,$t2,-1
            j end
        if2:
        beq $a0,$t6,if3
            addi $t0,$t2,1
            j end
        if3:
            PI1
            penter
            addi $t4,$t4,1
            j BREAK
        end:
        j while
    BREAK:
    bnez $t4,endl
        PI0
        penter
    endl:
    pop($ra)
    jr $ra
